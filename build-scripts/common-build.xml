<project name="common" >
	<tstamp>
	   <format property="start.timestamp" pattern="yyyyMMddHHmmss" />
	</tstamp>		
	
	<property name="dist.dir"	value="${project.dir}/dist"	/>
	<property name="report.dir"	value="${dist.dir}/reports"	/>
	<property name="build.dir"	value="${project.dir}/build"	/>
	<property name="java.build.dir"	value="${build.dir}/release"	/>
	<property name="lib.dir"	value="${project.dir}/lib"		/>
	<property name="tmp.dir"	value="${project.dir}/tmp"		/>
	<property name="java.src.dir" value="${project.dir}/src/java" />
	<property name="java.src.generated.dir" value="${project.dir}/src/generated" />
	<property name="java.src.resources" value="${project.dir}/src/resources" />
	<property name="java.src.tests.dir" value="${project.dir}/src/tests" />
	<property name="xsd.src.dir" value="${project.dir}/src/xsd" />

	<property name="base.jar.filename" value="${ant.project.name}" />
	<property name="base.version" value="UNVERSIONED" />

	<property name="version" value="${base.version}-${start.timestamp}" />
	<property name="jar.filename" value="${base.jar.filename}-${version}.jar" />
	<property name="xmlbeans.jar.filename" value="${base.jar.filename}-xmlbeans.jar" />
	<property name="jar.built.by" value="${user.name}" />
	
	<target name="prepareDirectories">	
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${java.build.dir}"/>
		<mkdir dir="${lib.dir}"/>
		<mkdir dir="${tmp.dir}"/>
		<mkdir dir="${java.src.generated.dir}"/>
		<mkdir dir="${java.src.dir}"/>
		<mkdir dir="${java.src.resources}"/>
		<mkdir dir="${java.src.tests.dir}"/>
	</target>
	
	<target name="java-annotations" depends="prepareDirectories, resolve">
		<mkdir dir="${java.src.generated.dir}"/>
		<path id="lib.path.id">
			<fileset dir="${lib.dir}" includes="**/*.jar"/>			
		</path>
		
		<javac srcdir="${java.src.dir}"
	    destdir="${java.src.generated.dir}"
	    failonerror="true"
	    fork="true"
			classpathref="lib.path.id">
	    	<compilerarg value="-proc:only"/>
		</javac>
	</target>

	<target name="xml-gen" if="generate.xmlBeans">

		<taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean">
			<classpath>
				<fileset dir="${lib.dir}" includes="*.jar" />
			</classpath>
		</taskdef>

		<path id="lib.path.id">
			<fileset dir="${lib.dir}" includes="**/*.jar"/>			
		</path>

		<!-- xmlbeans does support compiling for just source, so we build it into its own jar, unpack the jar into the 
		build directory.  It is then packaged as part of the main jar file. 

		The original xml beans jar file is left in the library to be used when compiling the other java code.

		Note: xmlbeans does have a source only switch, but that doesn't generate all the files needed to jar and deploy.
		-->		
		<delete file="${lib.dir}/${xmlbeans.jar.filename}" quiet="true" />
		<xmlbean destfile="${lib.dir}/${xmlbeans.jar.filename}" classpathref="lib.path.id" failonerror="true">
			<fileset dir="${xsd.src.dir}" includes="**/*.xsd"/>
		</xmlbean>
		<unjar src="${lib.dir}/${xmlbeans.jar.filename}" dest="${java.build.dir}">
    	<patternset><exclude name="META-INF/**/*.*"/></patternset>
		</unjar>			
	</target>

	
	<!-- ================================= 
          target: compile              
         ================================= -->
    <target name="compile" depends="java-annotations, xml-gen">
      <mkdir dir="${java.build.dir}"/>
			<path id="lib.path.id">
				<fileset dir="${lib.dir}" includes="**/*.jar"/>				
			</path>    	
    	
    	<javac destdir="${java.build.dir}" 
    			classpathref="lib.path.id"
					debug="on" debuglevel="lines, vars, source">
    		<src path="${java.src.dir}"/>
    		<src path="${java.src.generated.dir}"/>
				<compilerarg value="-proc:none"/>
    	</javac>
    	
    	<copy todir="${java.build.dir}">
    		<fileset dir="${java.src.resources}" />    	      
    	</copy>

    </target>

	<!-- ================================= 
          target: jar              
         ================================= -->
    <target name="jar" depends="compile">
		<mkdir dir="${dist.dir}"/>
        <jar destfile="${dist.dir}/${jar.filename}">
            <fileset dir="${java.build.dir}" />
            <manifest>
                <attribute name="Built-By" value="${jar.built.by}"/>
                <attribute name="Build-Version" value="${version}" />
            </manifest>
        </jar>
    </target>

	<!-- ================================= 
          target: dev-build                     
         ================================= -->
	<target name="dev-java-build" depends="jar, publish-local" description="--> default java builder to run on a development machine" />

	<!-- ================================= 
          target: clean-lib              
         ================================= -->
    <target name="clean-lib">
        <delete includeemptydirs="true" dir="${lib.dir}"/>
    </target>

    <!-- ================================= 
          target: clean-build              
         ================================= -->
    <target name="clean-build">
        <delete includeemptydirs="true" dir="${build.dir}"/>
    </target>

	<!-- ================================= 
          target: clean-dist              
         ================================= -->
    <target name="clean-dist">
        <delete includeemptydirs="true" dir="${dist.dir}"/>
    </target>

    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" depends="clean-build, clean-lib, clean-dist" description="--> removes all directories that are not part of source control." >
    	<delete includeemptydirs="true" dir="${tmp.dir}"/>
			<delete includeemptydirs="true" dir="${java.src.generated.dir}"/>
    </target>
	
		<target name="java-metrics" description="-->" depends="resolve">
			<path id="lib.path.id">
				<fileset dir="${lib.dir}" includes="**/*.jar"/>				
			</path>    	

			<mkdir dir="${report.dir}/code_metrics" />
			
			<taskdef name="javancss"
				classname="javancss.JavancssAntTask"
				classpathref="lib.path.id"/>

<!--
<javancss srcdir="${java.src.dir}" 
	outputfile="${report.dir}/code_metrics/javancss.xml"
	includes="**/*.java"/>

			<javancss srcdir="${java.src.dir}"
				abortOnFail="false" ccnPerFuncMax="10"
				includes="**/*.java"
  />

format="xml"
-->
			<javancss srcdir="${java.src.dir}" 
				generateReport="true"
				outputfile="${report.dir}/code_metrics/metrics.xml"
				
				includes="**/*.java"/>

		</target>

</project>
